{"ast":null,"code":"import { useState, useEffect } from 'react'; //https://stackoverflow.com/questions/27928/calculate-distance-between-two-latitude-longitude-points-haversine-formula\n\nfunction getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n  var R = 6371; // Radius of the earth in km\n\n  var dLat = deg2rad(lat2 - lat1); // deg2rad below\n\n  var dLon = deg2rad(lon2 - lon1);\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c; // Distance in km\n\n  return d;\n}\n\nfunction deg2rad(deg) {\n  return deg * (Math.PI / 180);\n}\n\nconst Localitation = () => {\n  const [data, setData] = useState([]);\n  const [ditance, setDis] = useState(0);\n  useEffect(() => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(async function (position) {\n        var url = 'http://openmensa.org/api/v2/canteens?near[lat]=' + position.coords.latitude + '&near[lng]=' + position.coords.longitude + '&near[dist]=5';\n        const response = await fetch(url);\n        const data = await response.json();\n        setData(data[0]);\n        var a = getDistanceFromLatLonInKm(position.coords.latitude, position.coords.longitude, data[0].coordinates[0], data[0].coordinates[1]);\n        a = Math.round(a * 100) / 100;\n        setDis(a);\n      });\n    }\n  }, []);\n  return [data, ditance];\n};\n\nexport default Localitation;","map":{"version":3,"sources":["C:/Users/Ruben-Laptop/Desktop/mensa-app-gruppe-05/client/src/components/fetchNearMensa.js"],"names":["useState","useEffect","getDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","d","deg","PI","Localitation","data","setData","ditance","setDis","navigator","geolocation","getCurrentPosition","position","url","coords","latitude","longitude","response","fetch","json","coordinates","round"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AACA,SAASC,yBAAT,CAAmCC,IAAnC,EAAyCC,IAAzC,EAA+CC,IAA/C,EAAqDC,IAArD,EAA2D;AACvD,MAAIC,CAAC,GAAG,IAAR,CADuD,CACzC;;AACd,MAAIC,IAAI,GAAGC,OAAO,CAACJ,IAAI,GAAGF,IAAR,CAAlB,CAFuD,CAErB;;AAClC,MAAIO,IAAI,GAAGD,OAAO,CAACH,IAAI,GAAGF,IAAR,CAAlB;AACA,MAAIO,CAAC,GACDC,IAAI,CAACC,GAAL,CAASL,IAAI,GAAG,CAAhB,IAAqBI,IAAI,CAACC,GAAL,CAASL,IAAI,GAAG,CAAhB,CAArB,GACAI,IAAI,CAACE,GAAL,CAASL,OAAO,CAACN,IAAD,CAAhB,IAA0BS,IAAI,CAACE,GAAL,CAASL,OAAO,CAACJ,IAAD,CAAhB,CAA1B,GACAO,IAAI,CAACC,GAAL,CAASH,IAAI,GAAG,CAAhB,CADA,GACqBE,IAAI,CAACC,GAAL,CAASH,IAAI,GAAG,CAAhB,CAHzB;AAKA,MAAIK,CAAC,GAAG,IAAIH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,IAAL,CAAUN,CAAV,CAAX,EAAyBC,IAAI,CAACK,IAAL,CAAU,IAAIN,CAAd,CAAzB,CAAZ;AACA,MAAIO,CAAC,GAAGX,CAAC,GAAGQ,CAAZ,CAVuD,CAUxC;;AACf,SAAOG,CAAP;AACH;;AAED,SAAST,OAAT,CAAiBU,GAAjB,EAAsB;AAClB,SAAOA,GAAG,IAAIP,IAAI,CAACQ,EAAL,GAAU,GAAd,CAAV;AACH;;AAED,MAAMC,YAAY,GAAG,MAAM;AACvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBvB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACwB,OAAD,EAAUC,MAAV,IAAoBzB,QAAQ,CAAC,CAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,iBAAiByB,SAArB,EAAgC;AAC5BA,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,gBAAgBC,QAAhB,EAA0B;AAE/D,YAAIC,GAAG,GAAG,oDAAoDD,QAAQ,CAACE,MAAT,CAAgBC,QAApE,GAA+E,aAA/E,GAA+FH,QAAQ,CAACE,MAAT,CAAgBE,SAA/G,GAA2H,eAArI;AACA,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,CAA5B;AACA,cAAMR,IAAI,GAAG,MAAMY,QAAQ,CAACE,IAAT,EAAnB;AACAb,QAAAA,OAAO,CAACD,IAAI,CAAC,CAAD,CAAL,CAAP;AACA,YAAIX,CAAC,GAAGT,yBAAyB,CAAC2B,QAAQ,CAACE,MAAT,CAAgBC,QAAjB,EAA0BH,QAAQ,CAACE,MAAT,CAAgBE,SAA1C,EAAoDX,IAAI,CAAC,CAAD,CAAJ,CAAQe,WAAR,CAAoB,CAApB,CAApD,EAA2Ef,IAAI,CAAC,CAAD,CAAJ,CAAQe,WAAR,CAAoB,CAApB,CAA3E,CAAjC;AACA1B,QAAAA,CAAC,GAAGC,IAAI,CAAC0B,KAAL,CAAW3B,CAAC,GAAG,GAAf,IAAsB,GAA1B;AACAc,QAAAA,MAAM,CAACd,CAAD,CAAN;AAEH,OAVD;AAYH;AACJ,GAfQ,EAeP,EAfO,CAAT;AAgBA,SAAO,CAACW,IAAD,EAAOE,OAAP,CAAP;AACH,CArBD;;AAsBA,eAAeH,YAAf","sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\n//https://stackoverflow.com/questions/27928/calculate-distance-between-two-latitude-longitude-points-haversine-formula\r\nfunction getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\r\n    var R = 6371; // Radius of the earth in km\r\n    var dLat = deg2rad(lat2 - lat1);  // deg2rad below\r\n    var dLon = deg2rad(lon2 - lon1);\r\n    var a =\r\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\r\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\r\n        ;\r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    var d = R * c; // Distance in km\r\n    return d;\r\n}\r\n\r\nfunction deg2rad(deg) {\r\n    return deg * (Math.PI / 180)\r\n}\r\n\r\nconst Localitation = () => {\r\n    const [data, setData] = useState([]);\r\n    const [ditance, setDis] = useState(0)\r\n\r\n    useEffect(() => {\r\n        if (\"geolocation\" in navigator) {\r\n            navigator.geolocation.getCurrentPosition(async function (position) {\r\n\r\n                var url = 'http://openmensa.org/api/v2/canteens?near[lat]=' + position.coords.latitude + '&near[lng]=' + position.coords.longitude + '&near[dist]=5';\r\n                const response = await fetch(url);\r\n                const data = await response.json()\r\n                setData(data[0])\r\n                var a = getDistanceFromLatLonInKm(position.coords.latitude,position.coords.longitude,data[0].coordinates[0],data[0].coordinates[1])\r\n                a = Math.round(a * 100) / 100\r\n                setDis(a)\r\n                \r\n            });\r\n\r\n        }\r\n    },[]) \r\n    return [data, ditance]\r\n}\r\nexport default Localitation"]},"metadata":{},"sourceType":"module"}