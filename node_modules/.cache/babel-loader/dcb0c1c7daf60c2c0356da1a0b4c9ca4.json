{"ast":null,"code":"var _jsxFileName = \"D:\\\\Final_App_Repo\\\\mensa-app-gruppe-05\\\\client\\\\src\\\\components\\\\likeIcon function way.js\";\nimport React, { useState, useEffect } from 'react';\nimport FavoriteBorderOutlinedIcon from '@material-ui/icons/FavoriteBorderOutlined';\nimport FavoriteOutlinedIcon from '@material-ui/icons/FavoriteOutlined';\nimport IconButton from '@material-ui/core/IconButton';\nexport default function LikeIcon(props) {\n  const [isDelete, setisDelete] = useState(true);\n  const [isAdded, setisAdded] = useState(false); //Fetch Lieblingsgerichte\n\n  const Thedata = () => {\n    const [readyLiebling, setreadyLiebling] = useState([]);\n    useEffect(() => {\n      const loadData = async () => {\n        const response = await fetch('/mygericht/');\n        const data = await response.json(); //console.log(data)\n\n        setreadyLiebling(data); //console.log(this.state.readyLiebling[2].id + \" testing\")\n      };\n\n      loadData('/mygericht/');\n    }, []);\n    return readyLiebling;\n  };\n\n  const g = props.g;\n  const meineGerichte = Thedata(); //Fügt Lieblingsgerichte hinzu\n\n  const postGericht = async g => {\n    setisAdded(true); // POST request using fetch with async/await\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(g)\n    };\n    const response = await fetch('/mygericht', requestOptions);\n    const data = await response.json();\n  }; //Löscht Lieblingsgericht\n\n\n  const deleteGericht = async g => {\n    setisDelete(false); // POST request using fetch with async/await\n\n    const tg = g;\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: \"\"\n    };\n    const response = await fetch('/mygericht/' + tg.id, requestOptions);\n    const data = await response.json();\n    console.log(data);\n  };\n\n  const isLiebling = () => {\n    var bool = [];\n    var bool2 = [];\n\n    for (var i in meineGerichte) {\n      //console.log(meineGerichte[1].id + \" mm\")\n      if (g.id == meineGerichte[i].id) {\n        console.log(meineGerichte[i].id);\n        bool.push( /*#__PURE__*/React.createElement(FavoriteOutlinedIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 27\n          }\n        }));\n      } else {\n        bool.push( /*#__PURE__*/React.createElement(FavoriteBorderOutlinedIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 27\n          }\n        }));\n        bool.pop(0);\n      }\n\n      console.log(bool2[i]);\n    }\n\n    return bool;\n  };\n\n  const t = isLiebling();\n\n  if (meineGerichte == \"\" || t == \"\") {\n    if (!isAdded) {\n      return /*#__PURE__*/React.createElement(IconButton, {\n        key: \"tableModeButton\",\n        onClick: () => {\n          postGericht(g);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FavoriteBorderOutlinedIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(IconButton, {\n        onClick: () => {\n          deleteGericht(g);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FavoriteOutlinedIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }\n      }));\n      window.location.reload();\n    }\n  } else {\n    if (isDelete) {\n      return /*#__PURE__*/React.createElement(IconButton, {\n        onClick: () => {\n          deleteGericht(g);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }\n      }, t);\n    } else {\n      return /*#__PURE__*/React.createElement(IconButton, {\n        key: \"tableModeButton\",\n        onClick: () => {\n          postGericht(g);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(FavoriteBorderOutlinedIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }\n      }));\n    }\n\n    window.location.reload();\n  } //  https://stackoverflow.com/questions/41852930/reactjs-how-to-change-an-icon-of-a-button-on-the-click-event\n\n  /* render() {\r\n      const g = this.props.g\r\n      const myLiebling = this.isLiebling(g);\r\n      /* console.log(this.state.readyLiebling[\"id\"] + \" testing\") */\n\n  /* if(this.state.isCardView){\r\n      postGericht(g)\r\n  } */\n\n  /* if(myLiebling){\r\n      return(\r\n          <IconButton key=\"tableModeButton\" >\r\n          <FavoriteBorderOutlinedIcon />\r\n      </IconButton>\r\n      )\r\n  }else{\r\n      return(\r\n          <IconButton key=\"tableModeButton\"\r\n          onClick={() => {\r\n              this.setState({\r\n                  gericht: g\r\n              })\r\n              this.setState({\r\n                  isCardView: !this.state.isCardView\r\n              })\r\n              if(!this.state.isCardView){\r\n                  postGericht(g)\r\n              }\r\n              \r\n              \r\n          }\r\n            } >\r\n          {this.state.isCardView ? <FavoriteOutlinedIcon /> : <FavoriteBorderOutlinedIcon />}\r\n      </IconButton>\r\n      )\r\n  } \r\n       */\n\n  /* return (\r\n      <IconButton key=\"tableModeButton\"\r\n          onClick={() => {\r\n              this.setState({\r\n                  gericht: g\r\n              })\r\n              this.setState({\r\n                  isCardView: !this.state.isCardView\r\n              })\r\n              if(!this.state.isCardView){\r\n                  postGericht(g)\r\n              }\r\n              \r\n              \r\n          }\r\n            } >\r\n          {this.state.isCardView ? <FavoriteOutlinedIcon /> : <FavoriteBorderOutlinedIcon />}\r\n      </IconButton>) */\n\n}","map":{"version":3,"sources":["D:/Final_App_Repo/mensa-app-gruppe-05/client/src/components/likeIcon function way.js"],"names":["React","useState","useEffect","FavoriteBorderOutlinedIcon","FavoriteOutlinedIcon","IconButton","LikeIcon","props","isDelete","setisDelete","isAdded","setisAdded","Thedata","readyLiebling","setreadyLiebling","loadData","response","fetch","data","json","g","meineGerichte","postGericht","requestOptions","method","headers","body","JSON","stringify","deleteGericht","tg","id","console","log","isLiebling","bool","bool2","i","push","pop","t","window","location","reload"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport FavoriteBorderOutlinedIcon from '@material-ui/icons/FavoriteBorderOutlined';\r\nimport FavoriteOutlinedIcon from '@material-ui/icons/FavoriteOutlined';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\n\r\nexport default function LikeIcon(props) {\r\n\r\n    const [isDelete, setisDelete] = useState(true);\r\n    const [isAdded, setisAdded] = useState(false);\r\n    //Fetch Lieblingsgerichte\r\n    const Thedata = () => {\r\n        const [readyLiebling, setreadyLiebling] = useState([]);\r\n        useEffect(() => {\r\n            const loadData = async () => {\r\n                const response = await fetch('/mygericht/')\r\n                const data = await response.json()\r\n                //console.log(data)\r\n                setreadyLiebling(data)\r\n                //console.log(this.state.readyLiebling[2].id + \" testing\")\r\n            };\r\n            loadData('/mygericht/')\r\n\r\n        }, []);\r\n        return readyLiebling\r\n    }\r\n\r\n    const g = props.g\r\n    const meineGerichte = Thedata()\r\n\r\n    //Fügt Lieblingsgerichte hinzu\r\n    const postGericht = async (g) => {\r\n        setisAdded(true)\r\n        // POST request using fetch with async/await\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(g)\r\n        };\r\n        const response = await fetch('/mygericht', requestOptions);\r\n        const data = await response.json();\r\n\r\n    }\r\n\r\n    //Löscht Lieblingsgericht\r\n    const deleteGericht = async (g) => {\r\n        setisDelete(false)\r\n        // POST request using fetch with async/await\r\n        const tg = g\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: \"\"\r\n        };\r\n        const response = await fetch('/mygericht/' + tg.id, requestOptions);\r\n        const data = await response.json();\r\n        console.log(data)\r\n    }\r\n\r\n    const isLiebling = () => {\r\n        var bool = [];\r\n        var bool2 = []\r\n        for (var i in meineGerichte) {\r\n\r\n            //console.log(meineGerichte[1].id + \" mm\")\r\n            if (g.id == meineGerichte[i].id) {\r\n                console.log(meineGerichte[i].id)\r\n                bool.push(<FavoriteOutlinedIcon />);\r\n\r\n            } else {\r\n                bool.push(<FavoriteBorderOutlinedIcon />);\r\n                bool.pop(0)\r\n            }\r\n            console.log(bool2[i])\r\n\r\n        } return bool\r\n    }\r\n\r\n    const t = isLiebling();\r\n\r\n    if (meineGerichte == \"\" || t == \"\") {\r\n        if (!isAdded) {\r\n            return (\r\n                <IconButton key=\"tableModeButton\"\r\n                    onClick={() => { postGericht(g) }}\r\n                >\r\n                    <FavoriteBorderOutlinedIcon />\r\n                </IconButton>\r\n            )\r\n        } else{\r\n            return(\r\n                <IconButton onClick={() => { deleteGericht(g) }}>\r\n                    <FavoriteOutlinedIcon/>\r\n                </IconButton>\r\n            )\r\n            window.location.reload()\r\n        }\r\n    } else {\r\n        if (isDelete) {\r\n            return (\r\n                <IconButton onClick={() => { deleteGericht(g) }}>\r\n                    {t}\r\n                </IconButton>\r\n            )\r\n        } else {\r\n            return (\r\n                <IconButton key=\"tableModeButton\"\r\n                    onClick={() => { postGericht(g) }}\r\n                >\r\n                    <FavoriteBorderOutlinedIcon />\r\n                </IconButton>)\r\n        }\r\n        window.location.reload()\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //  https://stackoverflow.com/questions/41852930/reactjs-how-to-change-an-icon-of-a-button-on-the-click-event\r\n    /* render() {\r\n        const g = this.props.g\r\n        const myLiebling = this.isLiebling(g);\r\n        /* console.log(this.state.readyLiebling[\"id\"] + \" testing\") */\r\n    /* if(this.state.isCardView){\r\n        postGericht(g)\r\n    } */\r\n    /* if(myLiebling){\r\n        return(\r\n            <IconButton key=\"tableModeButton\" >\r\n            <FavoriteBorderOutlinedIcon />\r\n        </IconButton>\r\n        )\r\n    }else{\r\n        return(\r\n            <IconButton key=\"tableModeButton\"\r\n            onClick={() => {\r\n                this.setState({\r\n                    gericht: g\r\n                })\r\n                this.setState({\r\n                    isCardView: !this.state.isCardView\r\n                })\r\n                if(!this.state.isCardView){\r\n                    postGericht(g)\r\n                }\r\n                \r\n                \r\n            }\r\n\r\n            } >\r\n            {this.state.isCardView ? <FavoriteOutlinedIcon /> : <FavoriteBorderOutlinedIcon />}\r\n        </IconButton>\r\n        )\r\n    } \r\n         */\r\n\r\n    /* return (\r\n        <IconButton key=\"tableModeButton\"\r\n            onClick={() => {\r\n                this.setState({\r\n                    gericht: g\r\n                })\r\n                this.setState({\r\n                    isCardView: !this.state.isCardView\r\n                })\r\n                if(!this.state.isCardView){\r\n                    postGericht(g)\r\n                }\r\n                \r\n                \r\n            }\r\n\r\n            } >\r\n            {this.state.isCardView ? <FavoriteOutlinedIcon /> : <FavoriteBorderOutlinedIcon />}\r\n        </IconButton>) */\r\n}\r\n"]},"metadata":{},"sourceType":"module"}